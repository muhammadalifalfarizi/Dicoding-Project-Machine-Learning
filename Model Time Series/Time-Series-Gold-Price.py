# -*- coding: utf-8 -*-
"""Submission 2 Model ML Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12KGb6fs50IKDLr2nyTAk-vuDYoZtBk7x

# **MUHAMMAD ALIF ALFARIZI**

# **1494037162101-564**

Mengubah dataset menjadi dataframe
"""

import numpy as np 
import pandas as pd

data_train = pd.read_csv('gold_price_data.csv')
data_train

data_train.isnull().sum()

"""Membuat plot dari dataframe"""

import matplotlib.pyplot as plt
dates = data_train['Date'].values
prices = data_train['Value'].values

plt.figure(figsize=(15,5))
plt.plot(dates, prices)
plt.title('Gold Prices Average',
          fontsize=20);

"""Data Preprocessing"""

data_train = data_train.astype({"Value": float})

data_train.dtypes

prices = data_train['Value'].values
prices

prices_new = prices.reshape(-1,1)

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
min_max_scaler = StandardScaler()
prices = min_max_scaler.fit_transform(prices_new)

prices = prices.flatten()
prices

from sklearn.model_selection import train_test_split
X_train, X_test = train_test_split(prices, test_size=0.2, shuffle=False)

X_train.shape

X_test.shape

"""Konversi data menjadi tipe numpy"""

import tensorflow as tf
from keras.layers import Dense, LSTM

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1]))
    return ds.batch(batch_size).prefetch(1)

"""Model Selection"""

train_set = windowed_dataset(X_train, window_size=60, batch_size=128, shuffle_buffer=1000)
test_set = windowed_dataset(X_test, window_size=60, batch_size=128, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(60, return_sequences=True),
    tf.keras.layers.LSTM(60),
    tf.keras.layers.Dense(30, activation="relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(10, activation="relu"),
    tf.keras.layers.Dense(1)
])

"""MAE Treshold"""

threshold_mae = (prices.max() - prices.min()) * 10/100
threshold_mae

"""Fungsi Callback"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<threshold_mae):
      print("\nMae telah mencapai standar")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, validation_data=(test_set), epochs=100, callbacks=[callbacks])